name: Build

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  build:
    # Define the matrix strategy for different platforms/triplets
    strategy:
      fail-fast: false # Keep running other jobs even if one fails
      matrix:
        include:
          # --- Windows Targets ---
          - os: windows-latest
            triplet: x64-windows-release # Or x64-windows-release if preferred
            rid: win-x64
            bootstrap_script: .\external\vcpkg\bootstrap-vcpkg.bat
            vcpkg_exe: .\external\vcpkg\vcpkg.exe
            build_script: .\build.ps1 # Assuming PowerShell script for Windows
            shell: pwsh # Shell used by the runner for steps below
          - os: windows-latest
            triplet: x86-windows
            rid: win-x86
            bootstrap_script: .\external\vcpkg\bootstrap-vcpkg.bat
            vcpkg_exe: .\external\vcpkg\vcpkg.exe
            build_script: .\build.ps1
            shell: pwsh
          - os: windows-latest
            triplet: arm64-windows
            rid: win-arm64
            bootstrap_script: .\external\vcpkg\bootstrap-vcpkg.bat
            vcpkg_exe: .\external\vcpkg\vcpkg.exe
            build_script: .\build.ps1
            shell: pwsh

          # --- Linux Targets ---
          - os: ubuntu-latest # Consider ubuntu-18.04 container for older glibc if needed
            triplet: x64-linux-dynamic
            rid: linux-x64
            bootstrap_script: ./external/vcpkg/bootstrap-vcpkg.sh
            vcpkg_exe: ./external/vcpkg/vcpkg
            build_script: ./build.sh # Assuming Shell script for Linux
            shell: bash # Shell used by the runner for steps below
          # Add other triplets like linux-arm64, osx-arm64 etc. later

    runs-on: ${{ matrix.os }} # Run on the OS defined in the matrix

    defaults: # Set default shell for all run steps in this job
      run:
        shell: ${{ matrix.shell }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive" # Ensures external/vcpkg is checked out

      - name: Setup .NET SDK 8.0 # Needed for Cake Frosting Host & Bindings
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Setup .NET SDK 9.0 # Needed for Cake Frosting Host & Bindings
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Cache vcpkg artifacts
        uses: actions/cache@v4
        with:
          # Cache directories used by vcpkg
          path: |
            external/vcpkg/packages
            external/vcpkg/buildtrees
            external/vcpkg/downloads
          # Key invalidates cache based on OS, triplet, vcpkg.json changes, and vcpkg port file changes
          key: vcpkg-${{ runner.os }}-${{ matrix.triplet }}-${{ hashFiles('vcpkg.json') }}-${{ hashFiles('external/vcpkg/ports/**/portfile.cmake', 'external/vcpkg/ports/**/vcpkg.json') }}
          # Fallback keys for partial cache hits
          restore-keys: |
            vcpkg-${{ runner.os }}-${{ matrix.triplet }}-${{ hashFiles('vcpkg.json') }}-
            vcpkg-${{ runner.os }}-${{ matrix.triplet }}-

      - name: Install prerequisites (Linux Container Only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          apt-get update && apt-get install -y libltdl-dev

      - name: Bootstrap vcpkg
        run: ${{ matrix.bootstrap_script }}

      - name: Install dependencies using vcpkg (Manifest Mode)
        run: ${{ matrix.vcpkg_exe }} install --triplet ${{ matrix.triplet }}

      # Example step to run a simple Cake task (can be expanded later)
      - name: Run Cake Build (Info Task)
        run: ${{ matrix.build_script }} --target Info --verbosity diagnostic